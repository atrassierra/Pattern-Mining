import random
import argparse
import statistics as st

from individual import Individual

def division(a, b):
    try:
        return float(a / b)
    except ZeroDivisionError:
        return float("inf")

class Elite():
    """
    Elite Class

    This class contains the best individuals generated by the algorithm after g number of generations
    """
    def __init__(self, args, items):
        self.args = args
        self.items = items
        self.elite = dict()
        for firstGroup in self.items:
            for secondGroup in self.items:
                if firstGroup != secondGroup:
                    self.elite[(firstGroup, secondGroup)] = [1] * self.args.elite_length # Initialize the elite population by default / Mejor crearla con individuos malos

    def update(self, generation): # generation is the population at that moment
        self.orderElite()
        for group in self.elite:
            for individual in generation:
                if individual > self.elite[group][-1]:
                    self.elite[group][-1] = individual
                    self.orderElite()

    def orderElite(self):
        for group in self.elite:
            for indIndex in range(self.elite[group] - 1):
                if self.elite[group][indIndex + 1] > self.elite[group][indIndex]:
                    auxIndividual = self.elite[group][indIndex]
                    self.elite[group][indIndex] = self.elite[group][indIndex + 1]
                    self.elite[group][indIndex + 1] = auxIndividual
                elif self.elite[group][indIndex + 1].equalFitness(self.elite[group][indIndex]):
                    if self.elite[group][indIndex + 1].calculateSupport(group) > self.elite[group][indIndex]:
                        auxIndividual = self.elite[group][indIndex]
                        self.elite[group][indIndex] = self.elite[group][indIndex + 1]
                        self.elite[group][indIndex + 1] = auxIndividual